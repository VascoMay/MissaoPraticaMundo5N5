# Fun√ß√µes simuladas (definir de acordo com seu banco de dados e l√≥gica)
def getLoginAttempts(username):
    # Simula√ß√£o de tentativas de login
    return 0  # Exemplo: usu√°rio n√£o fez tentativas falhas

def userExists(username):
    # Simula√ß√£o de verifica√ß√£o de exist√™ncia de usu√°rio
    return False  # Exemplo: usu√°rio n√£o existe

def lookupCredentialsInDatabase(username, password):
    # Simula√ß√£o de verifica√ß√£o de credenciais
    return True  # Exemplo: credenciais v√°lidas

def incrementLoginAttempts(username):
    # Simula√ß√£o de incremento de tentativas
    pass

def resetLoginAttempts(username):
    # Simula√ß√£o de reset de tentativas
    pass

# Fun√ß√£o principal de login
def login(newUsername, newPassword):
    MIN_PASSWORD_LENGTH = 8
    MAX_LOGIN_ATTEMPTS = 5

    # Simula√ß√£o de controle de tentativas
    if getLoginAttempts(newUsername) >= MAX_LOGIN_ATTEMPTS:
        return "Erro: Muitas tentativas inv√°lidas. Tente novamente mais tarde."

    # Verifica se o nome de usu√°rio j√° est√° em uso
    if userExists(newUsername):
        return "Erro: Usu√°rio j√° existe."

    # Verifica se a senha tem o tamanho m√≠nimo
    if len(newPassword) < MIN_PASSWORD_LENGTH:
        return "Erro: A senha deve conter no m√≠nimo 8 caracteres."

    # Permite qualquer caractere na senha ‚Äì sem restri√ß√µes adicionais

    # Verifica as credenciais com mensagem gen√©rica
    isValidCredentials = lookupCredentialsInDatabase(newUsername, newPassword)

    if not isValidCredentials:
        incrementLoginAttempts(newUsername)
        return "Erro: Usu√°rio ou senha incorretos."  # üîí Erro gen√©rico

    # Limpa tentativas ap√≥s login bem-sucedido
    resetLoginAttempts(newUsername)

    return "Sucesso: Login realizado com sucesso."

# Testando a fun√ß√£o de login
username = "exemploUser"
password = "exemploSenha"
print(login(username, password))
